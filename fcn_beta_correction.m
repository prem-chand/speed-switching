function beta_all = fcn_beta_correction(XX,x_plus,beta_ctrl)
%FCN_BETA_CORRECTION Summary of this function goes here
%   Detailed explanation goes here
% XX=ival(1:10);
c=[1 1 0 0.5 0];
theta_minus=XX(1)+XX(3)+0.5*XX(5); %c*q-
theta_plus=c*XX(1:5);             %c*q+
theta = c*x_plus(1:5);
tau_end = 0.9;
%==========================================================================
% Control Coefficients
%==========================================================================
theta_return = (1-tau_end)*theta_plus + tau_end*theta_minus; % Use theta instead of tau
                                                 % here as tau=0 results in
                                                 % loss of rank

a = [theta^3 theta^4 theta^5 theta^6 theta^7 ; ...
    3*theta^2 4*theta^3 5*theta^4 6*theta^5 7*theta^6 ; ...
    theta_return^3 theta_return^4 theta_return^5 theta_return^6 theta_return^7 ; ...
    3*theta_return^2 4*theta_return^3 5*theta_return^4 6*theta_return^5 7*theta_return^6 ; ...
    6*theta_return 12*theta_return^2 20*theta_return^3 30*theta_return^4 42*theta_return^5];
for k=0:1:3
    b = [ -beta_ctrl(2*k+1)*theta - beta_ctrl(2*k+2)*theta^2 ; ...
        -beta_ctrl(2*k+1) - 2*beta_ctrl(2*k+2)*theta ;...
        -beta_ctrl(2*k+1)*theta_return - beta_ctrl(2*k+2)*theta_return^2 ; ...
        -beta_ctrl(2*k+1) - 2*beta_ctrl(2*k+2)*theta_return ; ...
        - 2*beta_ctrl(2*k+2)];
    beta_cmp(:,k+1) = a\b;
end
beta_all = [ 0 beta_ctrl(1:2)' beta_cmp(:,1)' ; ...
    0 beta_ctrl(3:4)' beta_cmp(:,2)' ; ...
    0 beta_ctrl(5:6)' beta_cmp(:,3)' ; ...
    0 beta_ctrl(7:8)' beta_cmp(:,4)'];
end
